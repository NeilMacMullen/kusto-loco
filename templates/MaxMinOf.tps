using System;
using System.Linq;
using System.Text;
using Kusto.Language.Symbols;
using KustoLoco.Core.DataSource;
using KustoLoco.Core.DataSource.Columns;

namespace KustoLoco.Core.Evaluation.BuiltIns.Impl;

/*
  This file is autogenerated 
*/
{{for m in ["Min","Max"]}}
{{ for line in model 
   t=line.Type 
   s=line.Scalar
   tName = (t | string.capitalize)
}}
internal class {{m}}OfFunction{{tName}}Impl : IScalarFunctionImpl
{
    public ScalarResult InvokeScalar(ScalarResult[] arguments)
    {
        {{t}}? ret = null;
        foreach (var t in arguments) ret = TypeComparison.{{m}}Of{{tName}}(ret, ({{t}}?)t.Value);
        return new ScalarResult(ScalarTypes.{{s}}, ret);
    }
    public ColumnarResult InvokeColumnar(ColumnarResult[] arguments)
    {
        var columns = arguments
            .Select(a => a.Column)
            .Cast<TypedBaseColumn<{{t}}?>>().ToArray();

        var data = new {{t}}?[columns[0].RowCount];
        var builder = new StringBuilder();
        for (var row = 0; row < columns[0].RowCount; row++)
        {
            {{t}}? ret = null;
            foreach (var t in columns) ret = TypeComparison.{{m}}Of{{tName}}(ret, t[row]);
            data[row] = ret;
        }
        return new ColumnarResult(ColumnFactory.Create(data));
    }
}
{{end}}


{{end}}

