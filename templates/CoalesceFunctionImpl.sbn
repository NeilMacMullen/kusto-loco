{{include "lib/warnings.sbn"}}
using System;
using System.Diagnostics;
using System.Linq;
using Kusto.Language.Symbols;
using KustoLoco.Core.DataSource;
using System.Collections.Generic;
using System.Text.Json.Nodes;
using Kusto.Language;
using KustoLoco.Core.DataSource.Columns;

namespace KustoLoco.Core.Evaluation.BuiltIns.Impl;

{{autogenwarning}} 


{{ for line in model 
   t=line.Type 
   s=line.Scalar
   tName = (t | string.capitalize)
}}
internal sealed class CoalesceFunction{{tName}}Impl : IScalarFunctionImpl
{
    public ScalarResult InvokeScalar(ScalarResult[] arguments)
 {
     {{t}}? result = null;
     for (var i = 0; i < arguments.Length; i++)
     {
         var item = ({{t}}?)arguments[i].Value;
         if (item is null 
         {{if t =="string"}}|| item.Length == 0 {{end}}   
         ) 
         continue;
         result = item;
         break;
     }
     return new ScalarResult(ScalarTypes.{{s}}, result);
 }

 public ColumnarResult InvokeColumnar(ColumnarResult[] arguments)
 {
     Debug.Assert(arguments.Length > 0);

     var numRows = arguments[0].Column.RowCount;
     var data = new {{t}}?[numRows];
     for (var j = 0; j < numRows; j++)
     {
         for (var i = 0; i < arguments.Length; i++)
         {
             var column = (TypedBaseColumn<{{t}}?>)arguments[i].Column;
             var item = column[j];
            if (item is null 
            {{if t =="string"}}|| item.Length == 0 {{end}}   
            )  
            continue;
            data[j] = item;
           break;
         }
     }

     return new ColumnarResult(ColumnFactory.Create(data));
 }
}  
{{end}}


internal static class Coalesce
{

    internal static void Register(Dictionary<FunctionSymbol, ScalarFunctionInfo> functions)
    {
        var overloads = new ScalarFunctionInfo(
{{ for line in model 
   t=line.Type 
   s=line.Scalar
   tName = (t | string.capitalize)
}}
            new ScalarOverloadInfo(new CoalesceFunction{{tName}}Impl(),true, ScalarTypes.{{s}}, ScalarTypes.{{s}})
{{if (!for.last) 
"            ,"
end}}
{{end}}
            );
        functions.Add(Kusto.Language.Functions.Coalesce, overloads);
    }
}