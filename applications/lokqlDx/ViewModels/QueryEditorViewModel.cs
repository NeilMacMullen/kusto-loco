using System.Text.Json;
using Avalonia.Media;
using AvaloniaEdit.Document;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Intellisense;
using KustoLoco.Core.Settings;
using Lokql.Engine;
using lokqlDx;
using Microsoft.VisualStudio.Threading;
using NotNullStrings;

namespace LokqlDx.ViewModels;

public partial class QueryEditorViewModel : ObservableObject, IDisposable
{
    private readonly ConsoleViewModel _consoleViewModel;
    private InteractiveTableExplorer _explorer;
    public readonly IntellisenseClient _intellisenseClient;

    public readonly SchemaIntellisenseProvider SchemaIntellisenseProvider = new();
    [ObservableProperty] private Workspace? _currentWorkspace;

    [ObservableProperty] private TextDocument _document = new();
    [ObservableProperty] private FontFamily? _fontFamily;
    [ObservableProperty] private double _fontSize = 20;
    public IntellisenseEntry[] InternalCommands = [];
    public IntellisenseEntry[] KqlFunctionEntries = [];
    [ObservableProperty] private string _queryText = string.Empty;

    public IntellisenseEntry[] SettingNames = [];
    [ObservableProperty] private bool _showLineNumbers;
    [ObservableProperty] private bool _wordWrap;
    public IntellisenseEntry[] KqlOperatorEntries = [];


    public QueryEditorViewModel(InteractiveTableExplorer explorer,
        ConsoleViewModel consoleViewModel,
        IntellisenseClient intellisenseClient
    )
    {
        _explorer = explorer;
        _consoleViewModel = consoleViewModel;
        _intellisenseClient = intellisenseClient;

        Document.Changing += Document_Changing;
        Document.Changed += Document_Changed;
        LoadIntellisense();
    }

    public CommandParser Parser { get; set; } = new([], string.Empty);


    public void Dispose()
    {
        Document.Changing -= Document_Changing;
        Document.Changed -= Document_Changed;
    }

    public event AsyncEventHandler? ExecutingQuery;

    private void Document_Changing(object? sender, DocumentChangeEventArgs e) => OnPropertyChanging(nameof(Document));

    private void Document_Changed(object? sender, DocumentChangeEventArgs e)
    {
        OnPropertyChanged(nameof(Document));
        if (CurrentWorkspace is not null) CurrentWorkspace.Text = Document.Text;
    }

    [RelayCommand(AllowConcurrentExecutions = false)]
    private async Task RunQuery(string query)
    {
        if (query.IsBlank())
            return;

        if (ExecutingQuery is not null)
            await ExecutingQuery.InvokeAsync(this, EventArgs.Empty);

        ////start capturing console output from the engine
        _consoleViewModel.PrepareForOutput();
        ////run the supplied lines of kusto/commands
        ////Note that we need the extra Task.Run here to ensure
        ////that the UI thread is not blocked for reports generated by
        ////the engine
        await Task.Run(async () => await _explorer.RunInput(query));

        SetSchema(_explorer.GetSchema());
        AddSettingsForIntellisense(_explorer.Settings);
    }

    public void AddSettingsForIntellisense(KustoSettingsProvider settings) =>
        SettingNames = settings.Enumerate()
            .Select(s => new IntellisenseEntry(s.Name, s.Value, string.Empty))
            .ToArray();

    private void LoadIntellisense()
    {
        using var s = ResourceHelper.SafeGetResourceStream("SyntaxHighlighting.xml");

        using var functions = ResourceHelper.SafeGetResourceStream("IntellisenseFunctions.json");
        KqlFunctionEntries = JsonSerializer.Deserialize<IntellisenseEntry[]>(functions)!;
        using var ops = ResourceHelper.SafeGetResourceStream("IntellisenseOperators.json");
        KqlOperatorEntries = JsonSerializer.Deserialize<IntellisenseEntry[]>(ops)!;
        AddSettingsForIntellisense(_explorer.Settings);
    }

    public void SetSchema(SchemaLine[] getSchema) => SchemaIntellisenseProvider.SetSchema(getSchema);

    public void AddInternalCommands(IEnumerable<VerbEntry> verbEntries)
    {
        var verbs = verbEntries.ToArray();
        InternalCommands = verbs.Select(v =>
                new IntellisenseEntry(v.Name, v.HelpText, string.Empty))
            .ToArray();
        Parser = new CommandParser(verbs.Select(x => x.Name), ".");
    }

    internal void SetUiPreferences(UIPreferences uiPreferences)
    {
        FontFamily = new FontFamily(uiPreferences.FontFamily);
        FontSize = uiPreferences.FontSize;
        ShowLineNumbers = uiPreferences.ShowLineNumbers;
        WordWrap = uiPreferences.WordWrap;
    }

    internal void SetText(string text) => Document.Text = text;

    public void SetExplorer(InteractiveTableExplorer explorer)
    {
        _explorer = explorer;
        AddSettingsForIntellisense(_explorer.Settings);
    }
}
