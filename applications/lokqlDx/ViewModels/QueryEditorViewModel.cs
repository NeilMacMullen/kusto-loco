using AvaloniaEdit.Document;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CommunityToolkit.Mvvm.Messaging;
using Intellisense;
using KustoLoco.Core.Settings;
using Lokql.Engine;
using lokqlDxComponents;
using lokqlDxComponents.Services;
using Microsoft.VisualStudio.Threading;
using NotNullStrings;
using System.Text.Json;

namespace LokqlDx.ViewModels;

public partial class QueryEditorViewModel : ObservableObject, IDisposable, IIntellisenseResourceManager,
    ICompletionManagerServiceLocator
{
    private readonly ConsoleViewModel _consoleViewModel;

    [ObservableProperty] private DisplayPreferencesViewModel _displayPreferences;
    [ObservableProperty] private TextDocument _document = new();
    private InteractiveTableExplorer _explorer;


    [ObservableProperty] private bool _isDirty;


    public QueryEditorViewModel(InteractiveTableExplorer explorer,
        ConsoleViewModel consoleViewModel, DisplayPreferencesViewModel displayPreferences,
        string initialText,
        IntellisenseClientAdapter adapter
    )
    {
        _intellisenseClient = adapter;
        _explorer = explorer;
        _consoleViewModel = consoleViewModel;
        DisplayPreferences = displayPreferences;

        Document.Changing += Document_Changing;
        Document.Changed += Document_Changed;
        LoadIntellisense();
        //catch errors with plugin registration
        try
        {
            AddInternalCommands(_explorer._commandProcessor.GetVerbs(_explorer._loader));
        }
        catch (Exception e)
        {
            SetText($"""
                     ERROR LOADING PLUGINS: 
                     {e.Message}
                     """);
            return;
        }

        SetText(initialText);
        _isDirty = false;
        SetSchema(_explorer.GetSchema());
    }

    public SchemaIntellisenseProvider SchemaIntellisenseProvider { get; } = new();

    public IntellisenseClientAdapter _intellisenseClient { get; }


    public void Dispose()
    {
        Document.Changing -= Document_Changing;
        Document.Changed -= Document_Changed;
    }

    public IntellisenseEntry[] InternalCommands => _intellisenseClient.InternalCommands;
    public IntellisenseEntry[] KqlFunctionEntries { get; set; } = [];
    public IntellisenseEntry[] SettingNames { get; set; } = [];
    public IntellisenseEntry[] KqlOperatorEntries { get; set; } = [];
    public int EditorOffset { get; set; }

    public IntellisenseEntry[] GetTables(string blockText) => SchemaIntellisenseProvider.GetTables(blockText);
    public IntellisenseEntry[] GetColumns(string blockText) => SchemaIntellisenseProvider.GetColumns(blockText);

    public void AddSettingsForIntellisense(KustoSettingsProvider settings) =>
        SettingNames = settings.Enumerate()
            .Select(s => new IntellisenseEntry(s.Name, s.Value, string.Empty))
            .ToArray();

    public void SetSchema(SchemaLine[] getSchema) => SchemaIntellisenseProvider.SetSchema(getSchema);

    public event AsyncEventHandler? ExecutingQuery;

    private void Document_Changing(object? sender, DocumentChangeEventArgs e) => OnPropertyChanging(nameof(Document));

    private void Document_Changed(object? sender, DocumentChangeEventArgs e)
    {
        OnPropertyChanged(nameof(Document));
        IsDirty = true;
    }

    [RelayCommand(AllowConcurrentExecutions = false)]
    private async Task RunQuery(string query) => await RunQueryString(query);

    public async Task RunQueryString(string query)
    {
        if (query.IsBlank())
            return;
        await WeakReferenceMessenger.Default.Send(new RunningQueryMessage(true));
        if (ExecutingQuery is not null)
            await ExecutingQuery.InvokeAsync(this, EventArgs.Empty);

        ////start capturing console output from the engine
        _consoleViewModel.PrepareForOutput();
        ////run the supplied lines of kusto/commands
        ////Note that we need the extra Task.Run here to ensure
        ////that the UI thread is not blocked for reports generated by
        ////the engine
        await Task.Run(async () => await _explorer.RunInput(query));

        SetSchema(_explorer.GetSchema());
        AddSettingsForIntellisense(_explorer.Settings);
        await WeakReferenceMessenger.Default.Send(new RunningQueryMessage(false));
    }


    private void LoadIntellisense()
    {
        using var functions = ResourceHelper.SafeGetResourceStream("IntellisenseFunctions.json");
        KqlFunctionEntries = JsonSerializer.Deserialize<IntellisenseEntry[]>(functions)!
            .Select(i => i with { Hint = IntellisenseHint.Function }).ToArray();
        using var ops = ResourceHelper.SafeGetResourceStream("IntellisenseOperators.json");
        KqlOperatorEntries = JsonSerializer.Deserialize<IntellisenseEntry[]>(ops)!
            .Select(i => i with { Hint = IntellisenseHint.Operator }).ToArray();
        AddSettingsForIntellisense(_explorer.Settings);
    }

    public void AddInternalCommands(IEnumerable<VerbEntry> verbEntries) =>
        _intellisenseClient.AddInternalCommands(verbEntries);

    public string GetText() => Document.Text;

    internal void SetText(string text) => Document.Text = text;

    public void SetExplorer(InteractiveTableExplorer explorer)
    {
        _explorer = explorer;
        AddSettingsForIntellisense(_explorer.Settings);
    }

    public void Insert(string text)
    {
        var insertPoint = Math.Min(EditorOffset + 1, Document.TextLength);
        if (insertPoint < 0) insertPoint = 0;
        Document.Insert(insertPoint,text);
    }
}
