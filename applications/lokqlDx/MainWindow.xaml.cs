using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Shell;
using Lokql.Engine;
using Microsoft.Win32;
using NotNullStrings;

namespace lokqlDx;

public partial class MainWindow : Window
{
    private readonly string[] _args;
    private readonly WpfConsole _console;
    private readonly Size _minWindowSize = new(600, 400);
    private readonly PreferencesManager _preferenceManager = new();
    private readonly WorkspaceManager _workspaceManager;
    private readonly WpfRenderingSurface _wpfRenderingSurface;

    private Copilot _copilot = new(string.Empty);
    private InteractiveTableExplorer _explorer;

    private Workspace currentWorkspace = new();
    private bool isBusy;


    public MainWindow(
        string[] args
    )
    {
        _args = args.ToArray();
        InitializeComponent();
        _console = new WpfConsole(OutputText);

        _workspaceManager = new WorkspaceManager();
        var settings = _workspaceManager.Settings;
        var loader = new StandardFormatAdaptor(settings, _console);
        var cp = CommandProcessorProvider.GetCommandProcessor();
        _wpfRenderingSurface = new WpfRenderingSurface(RenderingSurface, dataGrid,
            DatagridOverflowWarning, TheChart,
            settings);
        _explorer = new InteractiveTableExplorer(_console, loader, settings, cp, _wpfRenderingSurface);
    }

    private async Task RunQuery(string query)
    {
        if (query.IsBlank())
            return;
        if (isBusy)
            return;

        isBusy = true;
        Editor.SetBusy(true);
        //start capturing console output from the engine
        _console.PrepareForOutput();
        //run the supplied lines of kusto/commands
        //Note that we need the extra Task.Run here to ensure
        //that the UI thread is not blocked for reports generated by
        //the engine
        await Task.Run(async () => await _explorer.RunInput(query));

        Editor.SetSchema(_explorer.GetSchema());
        Editor.AddSettingsForIntellisense(_explorer.Settings);
        Editor.SetBusy(false);
        isBusy = false;
    }


    /// <summary>
    ///     Called when user presses SHIFT-ENTER in the query editor
    /// </summary>
    private async void OnQueryEditorRunTextBlock(object? sender, QueryEditorRunEventArgs eventArgs)
    {
        //auto-save if we are configured to do so and this is not a new project
        //(we don't do it for new projects because that is just annoying)
        if (!_workspaceManager.IsNewWorkspace &&
            _preferenceManager.FetchCachedApplicationSettings().AutoSave)
            Save();

        await RunQuery(eventArgs.Query);
    }

    /// <summary>
    ///     Update the UI because a new workspace has been loaded
    /// </summary>
    /// <remarks>
    ///     The clearWorkingContext flags indicates whether we should clear all working context
    ///     We don't always want to do this, for example if we are doing a save-as in which case it's
    ///     a bit disconcerting for the user if all their charts/tables disappear
    /// </remarks>
    private void UpdateUIFromWorkspace(bool clearWorkingContext)
    {
        var version = UpgradeManager.GetCurrentVersion();
        var title = _workspaceManager.Path.IsBlank()
            ? $"LokqlDX {version} - new workspace"
            : $"{Path.GetFileNameWithoutExtension(_workspaceManager.Path)} ({Path.GetDirectoryName(_workspaceManager.Path)})";

        Title = title;
        if (clearWorkingContext)
        {
            Editor.SetText(currentWorkspace.Text);

            dataGrid.ItemsSource = null;
        }
    }

    private void RebuildRecentFilesList()
    {
        string GetHeaderForPath(string s)
        {
            return $"{Path.GetFileName(s)} ({Path.GetDirectoryName(s)})";
        }

        RecentlyUsed.Items.Clear();
        foreach (var path in _preferenceManager.GetMruItems().Take(10))
        {
            var menuitem = new MenuItem
            {
                Header = GetHeaderForPath(path),
                DataContext = path
            };
            menuitem.Click += RecentlyUsedFileClicked;
            RecentlyUsed.Items.Add(menuitem);
        }
    }

    private void UpdateMostRecentlyUsed(string path)
    {
        if (path.IsBlank())
            return;
        _preferenceManager.BringToTopOfMruList(path);

        JumpList.AddToRecentCategory(path);

        RebuildRecentFilesList();
    }

    private void UpdateDynamicUiFromPreferences(bool moveGrid)
    {
        var preferences = _preferenceManager.UIPreferences;
        Editor.SetFont(preferences.FontFamily);
        Editor.SetWordWrap(preferences.WordWrap);
        Editor.ShowLineNumbers(preferences.ShowLineNumbers);
        OutputText.FontFamily = new FontFamily(preferences.FontFamily);
        Editor.SetFontSize(preferences.FontSize);
        OutputText.FontSize = preferences.FontSize;
        dataGrid.FontSize = preferences.FontSize;
        UserChat.FontSize = preferences.FontSize;
        ChatHistory.FontSize = preferences.FontSize;
        if (moveGrid)
        {
            GridSerializer.DeSerialize(MainGrid, preferences.MainGridSerialization);
            GridSerializer.DeSerialize(EditorConsoleGrid, preferences.EditorGridSerialization);
        }
    }

    private async void MainWindow_OnLoaded(object sender, RoutedEventArgs e)
    {
        _preferenceManager.RetrieveUiPreferencesFromDisk();
        Editor.AddInternalCommands(_explorer._commandProcessor.GetVerbs());
        RegistryOperations.AssociateFileType(true);
        PreferencesManager.EnsureDefaultFolderExists();
        UpdateDynamicUiFromPreferences(true);
        RebuildRecentFilesList();
        ResizeWindowAccordingToStoredPreferences();
        var pathToLoad = _args.Any()
            ? _args[0]
            : string.Empty;
        await LoadWorkspace(pathToLoad);
        var newVersion = await UpgradeManager.UpdateAvailable();
        if (newVersion.IsNotBlank())
        {
            StatusBar.Visibility = Visibility.Visible;
            UpdateInfo.Content = $"New version available {newVersion}";
        }

        Editor.SetFocus();
    }


    private void ShowMarkdownHelp(string page)
    {
        var dlg = new MarkdownHelpWindow(page);
        dlg.Show();
    }

    private void NavigateToLanding() => ShowMarkdownHelp("lokqlDx‐landing");

    private void ResizeWindowAccordingToStoredPreferences()
    {
        var ui = _preferenceManager.UIPreferences;
        if (Width > 100 && Height > 100 && Left > 0 && Top > 0)
        {
            Width = ui.WindowWidth < _minWindowSize.Width
                ? _minWindowSize.Width
                : ui.WindowWidth;
            Height = ui.WindowHeight < _minWindowSize.Height
                ? _minWindowSize.Height
                : ui.WindowHeight;
            Left = ui.WindowLeft;
            Top = ui.WindowTop;
        }
    }

    private async void RecentlyUsedFileClicked(object sender, RoutedEventArgs e)
    {
        if (sender is MenuItem { DataContext: string mruItem }) await LoadWorkspace(mruItem);
    }

    private void PersistUiPreferencesToDisk()
    {
        var ui = _preferenceManager.UIPreferences;
        ui.WindowLeft = Left;
        ui.WindowTop = Top;
        ui.WindowWidth = Width;
        ui.WindowHeight = Height;
        ui.MainGridSerialization = GridSerializer.Serialize(MainGrid);
        ui.EditorGridSerialization = GridSerializer.Serialize(EditorConsoleGrid);
        _preferenceManager.SaveUiPrefs();
    }

    private void SaveWorkspace(string path)
    {
        UpdateCurrentWorkspaceFromUI();
        _workspaceManager.Save(path, currentWorkspace);
        UpdateMostRecentlyUsed(path);
    }

    /// <summary>
    ///     Allow the user to save any pending changes
    /// </summary>
    /// <returns>
    ///     true if the user did the save or didn't need to
    /// </returns>
    private YesNoCancel OfferSaveOfCurrentWorkspace()
    {
        if (!CheckIfWorkspaceDirty())
            return YesNoCancel.Yes;

        var shouldSave = _preferenceManager.FetchCachedApplicationSettings().AutoSave;
        //always show the dialog if this is a new workspace
        //because otherwise it's a little disconcerting to click close
        //and immediately find yourself in the save-as dialog
        if (!shouldSave || _workspaceManager.IsNewWorkspace)
        {
            var result = MessageBox.Show(
                "You have have unsaved changes. Do you want to save them?",
                "Warning", MessageBoxButton.YesNoCancel);
            if (result == MessageBoxResult.Cancel)
                return YesNoCancel.Cancel;

            shouldSave = result == MessageBoxResult.Yes;
        }

        if (shouldSave)
            return Save();

        return YesNoCancel.No;
    }

    private void MainWindow_OnClosing(object? sender, CancelEventArgs e)
    {
        if (OfferSaveOfCurrentWorkspace() == YesNoCancel.Cancel)
        {
            e.Cancel = true;
            return;
        }


        //save the window size and position, font size etc regardless
        PersistUiPreferencesToDisk();
    }

    private async Task LoadWorkspace(string path)
    {
        if (OfferSaveOfCurrentWorkspace() == YesNoCancel.Cancel)
            return;

        //create a new explorer context
        var loader = new StandardFormatAdaptor(_workspaceManager.Settings, _console);
        _explorer = new InteractiveTableExplorer(_console, loader, _workspaceManager.Settings,
            CommandProcessorProvider.GetCommandProcessor(), _wpfRenderingSurface);

        //make sure we have the most recent global preferences
        var appPrefs = _preferenceManager.FetchApplicationPreferencesFromDisk();
        _workspaceManager.Load(path);
        currentWorkspace = _workspaceManager.Workspace;
        await RunQuery(appPrefs.StartupScript);
        await RunQuery(_workspaceManager.Workspace.StartupScript);
        UpdateMostRecentlyUsed(path);
        UpdateUIFromWorkspace(true);
        if (!appPrefs.HasShownLanding)
        {
            NavigateToLanding();
            appPrefs.HasShownLanding = true;
            _preferenceManager.Save(appPrefs);
        }
    }

    private async void OnOpenWorkSpace(object sender, RoutedEventArgs e)
    {
        var folder = _workspaceManager.ContainingFolder();
        var dialog = new OpenFileDialog
        {
            InitialDirectory = folder,
            Filter = $"Lokql Workspace ({WorkspaceManager.GlobPattern})|{WorkspaceManager.GlobPattern}",
            FileName = Path.GetFileName(_workspaceManager.Path)
        };

        if (dialog.ShowDialog() == true)
            await LoadWorkspace(dialog.FileName);
    }


    private void OnSaveWorkspace(object sender, RoutedEventArgs e) => Save();

    private void UpdateCurrentWorkspaceFromUI() => currentWorkspace = currentWorkspace with { Text = Editor.GetText() };

    private bool CheckIfWorkspaceDirty()
    {
        UpdateCurrentWorkspaceFromUI();
        return _workspaceManager.IsDirty(currentWorkspace);
    }

    /// <summary>
    ///     Save the current workspace to the current file
    /// </summary>
    private YesNoCancel Save()
    {
        if (!CheckIfWorkspaceDirty())
            return YesNoCancel.Yes;
        if (_workspaceManager.IsNewWorkspace) return SaveAs();

        SaveWorkspace(_workspaceManager.Path);
        return YesNoCancel.Yes;
    }

    /// <summary>
    ///     Save the current workspace to a new file
    /// </summary>
    /// <returns>
    ///     true if the user went ahead with the save
    /// </returns>
    private YesNoCancel SaveAs()
    {
        var dialog = new SaveFileDialog
        {
            Title = "Save Workspace as...",
            Filter = $"Lokql Workspace ({WorkspaceManager.GlobPattern})|{WorkspaceManager.GlobPattern}",
            FileName = Path.GetFileName(_workspaceManager.Path)
        };
        if (dialog.ShowDialog() == true)
        {
            SaveWorkspace(dialog.FileName);
            //make sure we update title bar
            UpdateUIFromWorkspace(false);
            return YesNoCancel.Yes;
        }

        //not saving the file counts as a cancel rather than "won't do anything"
        return YesNoCancel.Cancel;
    }

    private void SaveWorkspaceAsEvent(object sender, RoutedEventArgs e) => SaveAs();

    private async void NewWorkspace(object sender, RoutedEventArgs e)
    {
        if (OfferSaveOfCurrentWorkspace() == YesNoCancel.Cancel) return;
        await LoadWorkspace(string.Empty);
    }

    private void IncreaseFontSize(object sender, RoutedEventArgs e)
    {
        _preferenceManager.UIPreferences.FontSize = Math.Min(40, _preferenceManager.UIPreferences.FontSize + 1);
        UpdateDynamicUiFromPreferences(false);
    }

    private void DecreaseFontSize(object sender, RoutedEventArgs e)
    {
        _preferenceManager.UIPreferences.FontSize = Math.Max(6, _preferenceManager.UIPreferences.FontSize - 1);
        UpdateDynamicUiFromPreferences(false);
    }


    protected override void OnKeyDown(KeyEventArgs e)
    {
        base.OnKeyDown(e);
        MainMenu.RaiseMenuItemClickOnKeyGesture(e);
    }

    private void Navigate(string url) => OpenUriInBrowser(url);


    private void EnableJumpList(object sender, RoutedEventArgs e) => RegistryOperations.AssociateFileType(false);

    private async void SubmitToCopilot(object sender, RoutedEventArgs e)
    {
        SubmitButton.IsEnabled = false;
        if (!_copilot.Initialised)
        {
            _copilot = new Copilot(_explorer.Settings.GetOr("copilot", string.Empty));
            foreach (var table in _explorer.GetCurrentContext().Tables())
            {
                var sb = new StringBuilder();
                sb.AppendLine($"The table named '{table.Name}' has the following columns");
                var cols = table.ColumnNames.Zip(table.Type.Columns)
                    .Select(z => $"  {z.First} is of type {z.Second.Type.Name}")
                    .ToArray();
                foreach (var column in cols) sb.AppendLine(column);
                _copilot.AddSystemInstructions(sb.ToString());
            }
        }

        var userchat = UserChat.Text;
        UserChat.Text = string.Empty;
        const int maxResubmissions = 3;
        for (var i = 0; i < maxResubmissions; i++)
        {
            var response = await _copilot.Issue(userchat);


            var console = new WpfConsole(ChatHistory);

            //now try to extract kql...
            var lines = response.Split('\n');
            var kql = new StringBuilder();
            var getting = false;
            foreach (var line in lines)
            {
                if (line.StartsWith("```kql") || line.StartsWith("```kusto"))
                {
                    kql.Clear();
                    getting = true;
                    continue;
                }

                if (line.StartsWith("```"))
                {
                    getting = false;
                    continue;
                }

                if (getting)
                    kql.AppendLine(line.Trim());
            }

            _copilot.AddResponse(kql.ToString());
            console.PrepareForOutput();
            var options = new List<string> { Copilot.Roles.System, Copilot.Roles.User, Copilot.Roles.Kql };
            if (TerseMode.IsChecked != true)
                options.Add(Copilot.Roles.Assistant);
            _copilot.RenderResponses(console, options.ToArray());

            if (kql.ToString().IsBlank())
                break;
            await RunQuery(kql.ToString());
            var lastResult = _explorer.GetPreviousResult();

            if (lastResult.Error.IsBlank())
                break;
            userchat = $"That query gave an error: {lastResult.Error}";
        }

        SubmitButton.IsEnabled = true;
    }

    private void ResetCopilot(object sender, RoutedEventArgs e)
    {
        _copilot = new Copilot(string.Empty);
        ChatHistory.Document.Blocks.Clear();
    }

    private void OpenApplicationOptionsDialog(object sender, RoutedEventArgs e)
    {
        //make sure we have the latest preferences
        var appPreferences = _preferenceManager.FetchApplicationPreferencesFromDisk();
        var dialog = new ApplicationPreferencesWindow(appPreferences,
            _preferenceManager.UIPreferences)
        {
            Owner = this
        };
        //TODO - this is a bit of a hack based on the fact we've put the
        //font in this dialog
        var oldFont = _preferenceManager.UIPreferences.FontFamily;
        if (dialog.ShowDialog() == true)
        {
            _preferenceManager.Save(appPreferences);
            UpdateDynamicUiFromPreferences(false);
        }
        else
        {
            _preferenceManager.UIPreferences.FontFamily = oldFont;
        }
    }

    private void OpenWorkspaceOptionsDialog(object sender, RoutedEventArgs e)
    {
        UpdateCurrentWorkspaceFromUI();
        var dialog = new WorkspacePreferencesWindow(currentWorkspace, _preferenceManager.UIPreferences)
        {
            Owner = this
        };
        if (dialog.ShowDialog() == true)
        {
            currentWorkspace = dialog._workspace;
            Save();
        }
    }

    private void ToggleWordWrap(object sender, RoutedEventArgs e)
    {
        _preferenceManager.UIPreferences.WordWrap = !_preferenceManager.UIPreferences.WordWrap;
        UpdateDynamicUiFromPreferences(false);
    }

    private void ToggleLineNumbers(object sender, RoutedEventArgs e)
    {
        _preferenceManager.UIPreferences.ShowLineNumbers = !_preferenceManager.UIPreferences.ShowLineNumbers;
        UpdateDynamicUiFromPreferences(false);
    }

    private void OnCopyImageToClipboard(object sender, RoutedEventArgs e) => _wpfRenderingSurface.CopyToClipboard();


    private static void OpenUriInBrowser(string uri) =>
        Process.Start(new ProcessStartInfo { FileName = uri, UseShellExecute = true });


    private void OnAutoGeneratingColumn(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        if (e.PropertyType == typeof(DateTime))
            if (e.Column is DataGridTextColumn textColumn)
            {
                var fmt = _explorer.Settings.GetOr("datagrid.datetime_format", "dd MMM yyyy HH:mm");
                textColumn.Binding.StringFormat = fmt;
            }
    }


    private void AboutBox(object sender, RoutedEventArgs e)
    {
        var thisVersion = UpgradeManager.GetCurrentVersion();
        MessageBox.Show($"LokqlDx - version {thisVersion} ");
    }

    private void NavigateToWiki(object sender, RoutedEventArgs e)
    {
        if (sender is MenuItem { Tag: string page })
            ShowMarkdownHelp(page);
    }

    private void NavigateToUri(object sender, RoutedEventArgs e)
    {
        if (sender is MenuItem { Tag: string page })
            Navigate(page);
    }

    private void CreateFlyout(object sender, RoutedEventArgs e)
    {
        var lastResult = _explorer.GetPreviousResult();
        var dlg = new FlyoutResult(lastResult, _explorer.Settings);
        dlg.Show();
    }
}
