[
  {
    "Name": "abs",
    "Description": "Calculates the absolute value of the input.",
    "Syntax": "abs(*x*)"
  },
  {
    "Name": "ago",
    "Description": "Subtracts the given [timespan](scalar-data-types/timespan.md) from the current UTC time.\r\n\r\nLike now(), if you use ago() multiple times in a single query statement, the current UTC time\r\nbeing referenced will be the same across all uses.",
    "Syntax": "ago(*timespan*)"
  },
  {
    "Name": "array_length",
    "Description": "Calculates the number of elements in a dynamic array.\r\n\r\n\u003E **Deprecated aliases:** arraylength()",
    "Syntax": "array_length(*array*)"
  },
  {
    "Name": "array_sort_asc",
    "Description": "Receives one or more arrays. Sorts the first array in ascending order. Orders the remaining arrays to match the reordered first array.",
    "Syntax": "array_sort_asc(*array1*[, ..., *argumentN*])\r\n\r\narray_sort_asc(*array1*[, ..., *argumentN*],*nulls_last*)\r\n\r\nIf *nulls_last* isn\u0027t provided, a default value of true is used."
  },
  {
    "Name": "array_sort_desc",
    "Description": "Receives one or more arrays. Sorts the first array in descending order. Orders the remaining arrays to match the reordered first array.",
    "Syntax": "array_sort_desc(*array1*[, ..., *argumentN*])\r\n\r\narray_sort_desc(*array1*[, ..., *argumentN*],*nulls_last*)\r\n\r\nIf *nulls_last* isn\u0027t provided, a default value of true is used."
  },
  {
    "Name": "bin",
    "Description": "Rounds values down to an integer multiple of a given bin size.\r\n\r\nUsed frequently in combination with [summarize by ...](./summarizeoperator.md).\r\nIf you have a scattered set of values, they\u0027ll be grouped into a smaller set of specific values.\r\n\r\n\u003E The bin() and floor() functions are equivalent",
    "Syntax": "bin(*value*,*roundTo*)"
  },
  {
    "Name": "case",
    "Description": "Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.\r\n\r\nIf none of the predicates return true, the result of the else expression is returned.\r\nAll predicate arguments must be expressions that evaluate to a  boolean value.\r\nAll then arguments and the else argument must be of the same type.",
    "Syntax": "case(*predicate_1*, *then_1*,\r\n       [*predicate_2*, *then_2*, ...]\r\n       *else*)"
  },
  {
    "Name": "coalesce",
    "Description": "Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.",
    "Syntax": "coalesce(*arg*,*arg_2*,[*arg_3*,...])"
  },
  {
    "Name": "cos",
    "Description": "Returns the cosine function value of the specified angle. The angle is specified in radians.",
    "Syntax": "cos(*number*)"
  },
  {
    "Name": "datetime_diff",
    "Description": "Calculates the number of the specified periods between two [datetime](./scalar-data-types/datetime.md) values.",
    "Syntax": "datetime_diff(*period*,*datetime1*,*datetime2*)"
  },
  {
    "Name": "datetime_part",
    "Description": "Extracts the requested date part as an integer value.\r\n\r\n\u003E **Deprecated aliases:** datepart()",
    "Syntax": "datetime_part(*part*,*datetime*)"
  },
  {
    "Name": "datetime_utc_to_local",
    "Description": "Converts UTC [datetime](./scalar-data-types/datetime.md) to local datetime using a [time-zone specification](timezone.md).",
    "Syntax": "datetime_utc_to_local(*from*,*timezone*)"
  },
  {
    "Name": "dayofmonth",
    "Description": "Returns an integer representing the day number of the given datetime.",
    "Syntax": "dayofmonth(*date*)"
  },
  {
    "Name": "dayofweek",
    "Description": "Returns the integer number of days since the preceding Sunday, as a timespan.",
    "Syntax": "dayofweek(*date*)"
  },
  {
    "Name": "dayofyear",
    "Description": "Returns the integer number represents the day number of the given year.",
    "Syntax": "dayofyear(*date*)"
  },
  {
    "Name": "degrees",
    "Description": "Converts angle value in radians into value in degrees, using the formula degrees = (180 / PI ) * angle_in_radians.",
    "Syntax": "degrees(*radians*)"
  },
  {
    "Name": "endofday",
    "Description": "Returns the end of the day containing the date, shifted by an offset, if provided.",
    "Syntax": "endofday(*date* [, *offset*])"
  },
  {
    "Name": "endofmonth",
    "Description": "Returns the end of the month containing the date, shifted by an offset, if provided.",
    "Syntax": "endofmonth(*date* [, *offset*])"
  },
  {
    "Name": "endofweek",
    "Description": "Returns the end of the week containing the date, shifted by an offset, if provided.\r\n\r\nLast day of the week is considered to be a Saturday.",
    "Syntax": "endofweek(*date* [, *offset*])"
  },
  {
    "Name": "endofyear",
    "Description": "Returns the end of the year containing the date, shifted by an offset, if provided.",
    "Syntax": "endofyear(*date* [, *offset*])"
  },
  {
    "Name": "exp",
    "Description": "The base-e exponential function of x, which is e raised to the power x: e^x.",
    "Syntax": "exp(*x*)"
  },
  {
    "Name": "extract",
    "Description": "Get a match for a [regular expression](./re2.md) from a source string.\r\n\r\nOptionally, convert the extracted substring to the indicated type.",
    "Syntax": "extract(*regex*, *captureGroup*, *source* [, *typeLiteral*])"
  },
  {
    "Name": "format_datetime",
    "Description": "Formats a datetime according to the provided format.",
    "Syntax": "format_datetime(*date* , *format*)"
  },
  {
    "Name": "geo_distance_2points",
    "Description": "Calculates the shortest distance in meters between two geospatial coordinates on Earth.",
    "Syntax": "geo_distance_2points(*p1_longitude*,*p1_latitude*,*p2_longitude*,*p2_latitude*)"
  },
  {
    "Name": "geo_geohash_to_central_point",
    "Description": "Calculates the geospatial coordinates that represent the center of a geohash rectangular area.\r\n\r\nRead more about [geohash](https://en.wikipedia.org/wiki/Geohash).",
    "Syntax": "geo_geohash_to_central_point(*geohash*)"
  },
  {
    "Name": "geo_point_to_geohash",
    "Description": "Calculates the geohash string value of a geographic location.\r\n\r\nRead more about [geohash](https://en.wikipedia.org/wiki/Geohash).",
    "Syntax": "geo_point_to_geohash(*longitude*, *latitude*,[ *accuracy* ])"
  },
  {
    "Name": "getyear",
    "Description": "Returns the year part of the datetime argument.",
    "Syntax": "getyear(*date*)"
  },
  {
    "Name": "hourofday",
    "Description": "Returns the integer number representing the hour number of the given date.",
    "Syntax": "hourofday(*date*)"
  },
  {
    "Name": "iff",
    "Description": "Returns the value of *then* if *if* evaluates to true,\r\nor the value of *else* otherwise.\r\n\r\n\u003E The iff() and iif() functions are equivalent",
    "Syntax": "iff(*if*, *then*, *else*)"
  },
  {
    "Name": "iif",
    "Description": "Returns the value of *then* if *if* evaluates to true,\r\nor the value of *else* otherwise.\r\n\r\nAn alias for [iff()](ifffunction.md).",
    "Syntax": "iif(*if*, *then*, *else*)"
  },
  {
    "Name": "isempty",
    "Description": "Returns true if the argument is an empty string or is null.",
    "Syntax": "isempty(*value*)"
  },
  {
    "Name": "isnull",
    "Description": "Evaluates its sole argument and returns a bool value indicating if the argument evaluates to a null value.\r\n\r\n\u003E [!NOTE]\r\n\u003E String values can\u0027t be null. Use [isempty](./isemptyfunction.md) to determine if a value of type string is empty or not.",
    "Syntax": "isnull(*Expr*)"
  },
  {
    "Name": "log",
    "Description": "The natural logarithm is the base-e logarithm: the inverse of the natural exponential function (exp).",
    "Syntax": "log(*number*)"
  },
  {
    "Name": "log10",
    "Description": "log10() returns the common (base-10) logarithm of the input.",
    "Syntax": "log10(*number*)"
  },
  {
    "Name": "log2",
    "Description": "The logarithm is the base-2 logarithm: the inverse of the exponential function (exp) with base 2.",
    "Syntax": "log2(*number*)"
  },
  {
    "Name": "min_of",
    "Description": "Returns the minimum value of several evaluated scalar expressions.",
    "Syntax": "min_of (*arg*, *arg_2*, [ *arg_3*, ... ])"
  },
  {
    "Name": "monthofyear",
    "Description": "Returns the integer number from 1-12 representing the month number of the given year.\r\n\r\n\u003E The monthofyear() and getmonth() functions are equivalent",
    "Syntax": "monthofyear(*date*)"
  },
  {
    "Name": "not",
    "Description": "Reverses the value of its bool argument.",
    "Syntax": "not(*expr*)"
  },
  {
    "Name": "now",
    "Description": "Returns the current UTC time, optionally offset by a given [timespan](scalar-data-types/timespan.md).\r\n\r\nThe current UTC time will stay the same across all uses of now() in a single query statement, even if there\u0027s technically a small time difference between when each now() runs.",
    "Syntax": "now([ *offset* ])"
  },
  {
    "Name": "parse_json",
    "Description": "Interprets a string as a JSON value and returns the value as dynamic. If possible, the value is converted into relevant [data types](scalar-data-types/index.md).  For strict parsing with no data type conversion, use [extract()](extractfunction.md) or [extract_json()](extractjsonfunction.md) functions.\r\n\r\nIt\u0027s better to use the parse_json() function over the [extract_json()](./extractjsonfunction.md) function when you need to extract more than one element of a JSON compound object. Use [dynamic()](./scalar-data-types/dynamic.md) when possible.\r\n\r\n\u003E **Deprecated aliases:** parsejson(), toobject(), todynamic()",
    "Syntax": "parse_json(*json*)"
  },
  {
    "Name": "pow",
    "Description": "Returns a result of raising to power",
    "Syntax": "pow(*base*, *exponent* )"
  },
  {
    "Name": "radians",
    "Description": "Converts angle value in degrees into value in radians, using formula radians = (PI / 180 ) * angle_in_degrees",
    "Syntax": "radians(*degrees*)"
  },
  {
    "Name": "replace_string",
    "Description": "Replaces all string matches with a specified string.\r\n\r\n\u003E **Deprecated aliases:** replace()\r\n\r\nTo replace multiple strings, see [replace_strings()](replace-strings-function.md).",
    "Syntax": "replace_string(*text*, *lookup*, *rewrite*)"
  },
  {
    "Name": "round",
    "Description": "Returns the rounded number to the specified precision.",
    "Syntax": "round(*number* [, *precision*])"
  },
  {
    "Name": "row_number",
    "Description": "Returns the current row\u0027s index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\r\n\r\nThe row index starts by default at 1 for the first row, and is incremented by 1 for each additional row.\r\nOptionally, the row index can start at a different value than 1.\r\nAdditionally, the row index may be reset according to some provided predicate.",
    "Syntax": "row_number( [*StartingIndex* [, *Restart*]] )\r\n\r\n| Name | Type | Required | Description |\r\n|--|--|--|--|\r\n| *StartingIndex*| long | | The value of the row index to start at or restart to. The default value is 1.|\r\n| *restart*| bool | | Indicates when the numbering is to be restarted to the *StartingIndex* value. The default is false.|"
  },
  {
    "Name": "sign",
    "Description": "Returns the sign of the numeric expression.",
    "Syntax": "sign(*number*)"
  },
  {
    "Name": "sin",
    "Description": "Returns the sine function value of the specified angle. The angle is specified in radians.",
    "Syntax": "sin(*number*)"
  },
  {
    "Name": "split",
    "Description": "The split() function takes a string and splits it into substrings based on a specified delimiter, returning the substrings in an array. Optionally, you can retrieve a specific substring by specifying its index.",
    "Syntax": "split(*source*, *delimiter* [, *requestedIndex*])"
  },
  {
    "Name": "sqrt",
    "Description": "Returns the square root of the input.",
    "Syntax": "sqrt(*number*)"
  },
  {
    "Name": "startofday",
    "Description": "Returns the start of the day containing the date, shifted by an offset, if provided.",
    "Syntax": "startofday(*date* [, *offset* ])"
  },
  {
    "Name": "startofmonth",
    "Description": "Returns the start of the month containing the date, shifted by an offset, if provided.",
    "Syntax": "startofmonth(*date* [, *offset* ])"
  },
  {
    "Name": "startofweek",
    "Description": "Returns the start of the week containing the date, shifted by an offset, if provided.\r\n\r\nStart of the week is considered to be a Sunday.",
    "Syntax": "startofweek(*date* [, *offset* ])"
  },
  {
    "Name": "startofyear",
    "Description": "Returns the start of the year containing the date, shifted by an offset, if provided.",
    "Syntax": "startofyear(*date* [, *offset* ])"
  },
  {
    "Name": "strcat",
    "Description": "Concatenates between 1 and 64 arguments.",
    "Syntax": "strcat(*argument1*, *argument2* [, *argument3* ... ])"
  },
  {
    "Name": "strlen",
    "Description": "Returns the length, in characters, of the input string.\r\n\r\n\u003E [!NOTE]\r\n\u003E This function counts Unicode [code points](https://en.wikipedia.org/wiki/Code_point).",
    "Syntax": "strlen(*source*)"
  },
  {
    "Name": "substring",
    "Description": "Extracts a substring from the source string starting from some index to the end of the string.\r\n\r\nOptionally, the length of the requested substring can be specified.",
    "Syntax": "substring(*source*, *startingIndex* [, *length*])"
  },
  {
    "Name": "tan",
    "Description": "Returns the tangent value of the specified number.",
    "Syntax": "tan(*x*)"
  },
  {
    "Name": "tobool",
    "Description": "Convert inputs to boolean (signed 8-bit) representation.\r\n\r\n\u003E The tobool() and toboolean() functions are equivalent",
    "Syntax": "tobool(*value*)"
  },
  {
    "Name": "todatetime",
    "Description": "Converts the input to a [datetime](./scalar-data-types/datetime.md) scalar value.\r\n\r\n\u003E [!NOTE]\r\n\u003E Prefer using [datetime()](./scalar-data-types/datetime.md) when possible.",
    "Syntax": "todatetime(*value*)"
  },
  {
    "Name": "todouble",
    "Description": "Converts the input expression to a value of type real.\r\n\r\n\u003E The todouble() and toreal() functions are equivalent",
    "Syntax": "todouble(*Expr*)"
  },
  {
    "Name": "tohex",
    "Description": "Converts input to a hexadecimal string.",
    "Syntax": "tohex(*value*, [, *minLength* ])"
  },
  {
    "Name": "toint",
    "Description": "Converts the input to an integer value (signed 32-bit) number representation.\r\n\r\n\u003E [!NOTE]\r\n\u003E Prefer using [int()](./scalar-data-types/int.md) when possible.",
    "Syntax": "toint(*value*)"
  },
  {
    "Name": "tolong",
    "Description": "Converts the input value to a long (signed 64-bit) number representation.\r\n\r\n\u003E [!NOTE]\r\n\u003E Prefer using [long()](./scalar-data-types/long.md) when possible.",
    "Syntax": "tolong(*value*)"
  },
  {
    "Name": "tolower",
    "Description": "Converts the input string to lower case.",
    "Syntax": "tolower(*value*)"
  },
  {
    "Name": "tostring",
    "Description": "Converts the input to a string representation.",
    "Syntax": "tostring(*value*)"
  },
  {
    "Name": "totimespan",
    "Description": "Converts the input to a [timespan](./scalar-data-types/timespan.md) scalar value.\r\n\r\n\u003E **Deprecated aliases:** totime()",
    "Syntax": "totimespan(*value*)"
  },
  {
    "Name": "toupper",
    "Description": "Converts a string to upper case.",
    "Syntax": "toupper(*value*)"
  },
  {
    "Name": "trim_end",
    "Description": "Removes trailing match of the specified regular expression.",
    "Syntax": "trim_end(*regex*, *source*)"
  },
  {
    "Name": "trim",
    "Description": "Removes all leading and trailing matches of the specified regular expression.",
    "Syntax": "trim(*regex*, *source*)"
  },
  {
    "Name": "trim_start",
    "Description": "Removes leading match of the specified regular expression.",
    "Syntax": "trim_start(*regex*, *source*)"
  },
  {
    "Name": "url_decode",
    "Description": "The function converts an encoded URL into a regular URL representation.\r\n\r\nFor more information about URL encoding and decoding, see [Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).",
    "Syntax": "url_decode(*encoded_url*)"
  },
  {
    "Name": "url_encode_component",
    "Description": "The function converts characters of the input URL into a format that can be transmitted over the internet. Differs from [url_encode](./urlencodefunction.md) by encoding spaces as \u0027%20\u0027 and not as \u0027\u002B\u0027.\r\n\r\nFor more information about URL encoding and decoding, see [Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).",
    "Syntax": "url_encode_component(*url*)"
  },
  {
    "Name": "contains_cs",
    "Description": "Filters a record set for data containing a case-sensitive string. contains_cs searches for arbitrary sub-strings rather than [terms](datatypes-string-operators.md#what-is-a-term).\r\n\r\n[!INCLUDE [contains-operator-comparison](../../includes/contains-operator-comparison.md)]",
    "Syntax": "[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\r\n\r\nIf you\u0027re looking for a [term](datatypes-string-operators.md#what-is-a-term), use has_cs for faster results."
  },
  {
    "Name": "contains",
    "Description": "Filters a record set for data containing a case-insensitive string. contains searches for arbitrary sub-strings rather than [terms](datatypes-string-operators.md#what-is-a-term).\r\n\r\n[!INCLUDE [contains-operator-comparison](../../includes/contains-operator-comparison.md)]",
    "Syntax": "[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\r\n\r\nWhen possible, use [contains_cs](contains-cs-operator.md) - a case-sensitive version of the operator.\r\n\r\nIf you\u0027re looking for a [term](datatypes-string-operators.md#what-is-a-term), use has for faster results."
  },
  {
    "Name": "!contains_cs",
    "Description": "Filters a record set for data that doesn\u0027t include a case-sensitive string. !contains_cs searches for characters rather than [terms](datatypes-string-operators.md#what-is-a-term) of three or more characters. The query scans the values in the column, which is slower than looking up a term in a term index.\r\n\r\n[!INCLUDE [contains-operator-comparison](../../includes/contains-operator-comparison.md)]",
    "Syntax": "[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\r\n\r\nIf you\u0027re looking for a [term](datatypes-string-operators.md#what-is-a-term), use !has_cs for faster results."
  },
  {
    "Name": "!contains",
    "Description": "Filters a record set for data that doesn\u0027t include a case-sensitive string. !contains searches for characters rather than [terms](datatypes-string-operators.md#what-is-a-term) of three or more characters. The query scans the values in the column, which is slower than looking up a term in a term index.\r\n\r\n[!INCLUDE [contains-operator-comparison](../../includes/contains-operator-comparison.md)]",
    "Syntax": "[!INCLUDE [performance-tip-note](../../includes/performance-tip-note.md)]\r\n\r\nWhen possible, use the case-sensitive [!contains_cs](not-contains-cs-operator.md).\r\n\r\nUse !has if you\u0027re looking for a [term](datatypes-string-operators.md#what-is-a-term)."
  },
  {
    "Name": "between",
    "Description": "Filters a record set for data matching the values in an inclusive range.\r\n\r\nbetween can operate on any numeric, datetime, or timespan expression.",
    "Syntax": "*T* | where *expr* between (*leftRange* .. *rightRange*)"
  },
  {
    "Name": "!between",
    "Description": "Matches the input that is outside of the inclusive range.\r\n\r\n!between can operate on any numeric, datetime, or timespan expression.",
    "Syntax": "*T* | where *expr* !between (*leftRange* .. *rightRange*)"
  },
  {
    "Name": "dcount (aggregation function)",
    "Description": "Calculates an estimate of the number of distinct values that are taken by a scalar expression in the summary group.\r\n\r\n\u003E [!NOTE]\r\n\u003E The dcount() aggregation function is primarily useful for estimating the cardinality of huge sets. It trades accuracy for performance, and may return a result that varies between executions. The order of inputs may have an effect on its output.\r\n\r\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]",
    "Syntax": "dcount (*expr*[, *accuracy*])"
  },
  {
    "Name": "dcountif (aggregation function)",
    "Description": "Estimates the number of distinct values of *expr* for rows in which *predicate* evaluates to true.\r\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]",
    "Syntax": "dcountif (*expr*, *predicate*, [, *accuracy*])"
  },
  {
    "Name": "trimws",
    "Description": "(non-standard) Trims leading and trailing whitespace from the string",
    "Syntax": "trimws(*string*)"
  },
  {
    "Name": "levenshtein",
    "Description": "(non-standard) Calculates the levenshtein distance (similarity) between two strings.\r\nA value of 0 indicates that strings are identical.",
    "Syntax": "levenshtein(*string*,*string*)"
  },
  {
    "Name": "string_similarity",
    "Description": "(non-standard) Calculates string similarity as 1-(levenshtein/shortest string length).\r\nA value of 1.0 indicates that strings are identical.",
    "Syntax": "string_similarity(*string*,*string*)"
  },
  {
    "Name": "datetime_to_iso",
    "Description": "(non-standard) Returns the ISO string representation of a datetime",
    "Syntax": "datetime_to_iso(*datetime*)"
  },
  {
    "Name": "padleft",
    "Description": "(non-standard) Pads a string up to a specifed length by inserting spaces (or specified char) on left\r\nNote that if a string is supplied as the pad character, only the first character of the string will be used",
    "Syntax": "padleft(*string*,*length to pad to*,[*pad character or string*])"
  },
  {
    "Name": "padright",
    "Description": "(non-standard) Pads a string up to a specifed length by inserting spaces (or specified char) on right\r\nNote that if a string is supplied as the pad character, only the first character of the string will be used",
    "Syntax": "padright(*string*,*length to pad to*,[*pad character or string*])"
  },
  {
    "Name": "todatetimefmt",
    "Description": "(non-standard) Use a C# format string to interpret a string as a DateTime",
    "Syntax": "todatetimefmt(*date-string*,*format*)"
  },
  {
    "Name": "parsehex",
    "Description": "(non-standard) Parse a string as a hex value. The string may optionally start with 0x",
    "Syntax": "parsehex(*string*)"
  },
  {
    "Name": "binary_and",
    "Description": "binary and operator",
    "Syntax": "binary_and(*long*,*long*)"
  },
  {
    "Name": "binary_or",
    "Description": "binary or operator",
    "Syntax": "binary_or(*long*,*long*)"
  },
  {
    "Name": "binary_xor",
    "Description": "binary xor operator",
    "Syntax": "binary_xor(*long*,*long*)"
  },
  {
    "Name": "binary_not",
    "Description": "binary not operator",
    "Syntax": "binary_not(*long*)"
  },
  {
    "Name": "bitset_count_ones",
    "Description": "counts the number of '1' bits in the binary representation",
    "Syntax": "bitset_count_ones(*long*)"
  },
  {
    "Name": "binary_shift_left",
    "Description": "shift left",
    "Syntax": "binary_shift_left(*number*,*bits*)"
  },
  {
    "Name": "binary_shift_right",
    "Description": "shift right",
    "Syntax": "binary_shift_right(*number*,*bits*)"
  },
  {
    "Name": "make_datetime",
    "Description": "makes a datetime from a number of fields",
    "Syntax": "make_datetime(*year*,*month*,*day*)"
  },
  {
    "Name": "make_timespan",
    "Description": "makes a timespan from a number of fields",
    "Syntax": "make_timespan(*hour*,*minute*,*second*)"
  }



]
