[
  {
    "Name": "where",
    "Description": "Filters a table to the subset of rows that satisfy a predicate.\r\n\r\n\u003E The \u0060where\u0060 and \u0060filter\u0060 operators are equivalent",
    "Syntax": "*T* \u0060| where\u0060 *Predicate*"
  },
  {
    "Name": "project-keep",
    "Description": "Select what columns from the input to keep in the output. Only the columns that are specified as arguments will be shown in the result. The other columns are excluded.",
    "Syntax": "*T* \u0060| project-keep\u0060 *ColumnNameOrPattern* [\u0060,\u0060 ...]"
  },
  {
    "Name": "project-away",
    "Description": "Select what columns from the input table to exclude from the output table.",
    "Syntax": "*T* \u0060| project-away\u0060 *ColumnNameOrPattern* [\u0060,\u0060 ...]"
  },
  {
    "Name": "project",
    "Description": "Select the columns to include, rename or drop, and insert new computed columns.\r\n\r\nThe order of the columns in the result is specified by the order of the arguments. Only the columns specified in the arguments are included in the result. Any other columns in the input are dropped.",
    "Syntax": "*T* \u0060| project\u0060 [*ColumnName* | \u0060(\u0060*ColumnName*[\u0060,\u0060]\u0060)\u0060 \u0060=\u0060] *Expression* [\u0060,\u0060 ...]\r\n\r\nor\r\n\r\n*T* \u0060| project\u0060 *ColumnName* [\u0060=\u0060 *Expression*] [\u0060,\u0060 ...]"
  },
  {
    "Name": "project-rename",
    "Description": "Renames columns in the output table.",
    "Syntax": "*T* \u0060| project-rename\u0060 *NewColumnName* = *ExistingColumnName* [\u0060,\u0060 ...]"
  },
  {
    "Name": "project-reorder",
    "Description": "Reorders columns in the output table.",
    "Syntax": "*T* \u0060| project-reorder\u0060 *ColumnNameOrPattern* [\u0060asc\u0060 | \u0060desc\u0060 | \u0060granny-asc\u0060 | \u0060granny-desc\u0060] [\u0060,\u0060 ...]"
  },
  {
    "Name": "order",
    "Description": "Sort the rows of the input table into order by one or more columns.\r\n\r\n**Alias**: [sort](sortoperator.md)",
    "Syntax": "*T* \u0060| order by\u0060 *column* [\u0060asc\u0060 | \u0060desc\u0060] [\u0060nulls first\u0060 | \u0060nulls last\u0060] [\u0060,\u0060 ...]"
  },
  {
    "Name": "take",
    "Description": "Return up to the specified number of rows.\r\n\r\nThere is no guarantee which records are returned, unless\r\nthe source data is sorted. If the data is sorted, then the top values will be returned.\r\n\r\n\u003E The \u0060take\u0060 and \u0060limit\u0060 operators are equivalent\r\n\r\n\u003E [!NOTE]\r\n\u003E \u0060take\u0060 is a simple, quick, and efficient way to view a small sample of records when browsing data interactively, but be aware that it doesn\u0027t guarantee any consistency in its results when executing multiple times, even if the data set hasn\u0027t changed.\r\n\u003E Even if the number of rows returned by the query isn\u0027t explicitly limited by the query (no \u0060take\u0060 operator is used), Kusto limits that number by default. For more details, see [Kusto query limits](../concepts/querylimits.md).",
    "Syntax": "\u0060take\u0060 *NumberOfRows*"
  },
  {
    "Name": "summarize",
    "Description": "Produces a table that aggregates the content of the input table.",
    "Syntax": "*T* \u0060| summarize\u0060 [ *SummarizeParameters* ]\r\n      [[*Column* \u0060=\u0060] *Aggregation* [\u0060,\u0060 ...]]\r\n    [\u0060by\u0060\r\n      [*Column* \u0060=\u0060] *GroupExpression* [\u0060,\u0060 ...]]"
  },
  {
    "Name": "extend",
    "Description": "Create calculated columns and append them to the result set.",
    "Syntax": "*T* \u0060| extend\u0060 [*ColumnName* | \u0060(\u0060*ColumnName*[\u0060,\u0060 ...]\u0060)\u0060 \u0060=\u0060] *Expression* [\u0060,\u0060 ...]"
  },
  {
    "Name": "count",
    "Description": "Returns the number of records in the input record set.",
    "Syntax": "*T* \u0060|\u0060 \u0060count\u0060"
  },
  {
    "Name": "render",
    "Description": "Instructs the user agent to render a visualization of the query results.  \r\n\r\nThe render operator must be the last operator in the query, and can only be used with queries that produce a single tabular data stream result.  The render operator does not modify data. It injects an annotation (\u0022Visualization\u0022) into the result\u0027s extended  properties. The annotation contains the information provided by the operator in the query. The interpretation of the visualization information is done by the user agent. Different agents, such as Kusto.Explorer or Azure Data Explorer web UI, may support different visualizations.\r\n\r\nThe data model of the render operator looks at the tabular data as if it has\r\nthree kinds of columns:\r\n\r\n* The x axis column (indicated by the \u0060xcolumn\u0060 property).\r\n* The series columns (any number of columns indicated by the \u0060series\u0060 property.) For each record, the combined values of these columns defines a single series, and the chart has as many series as there are distinct combined values.\r\n* The y axis columns (any number of columns indicated by the \u0060ycolumns\u0060 property). For each record, the series has as many measurements (\u0022points\u0022 in the chart) as there are y-axis columns.\r\n\r\n\u003E [!TIP]\r\n\u003E\r\n\u003E * Use \u0060where\u0060, \u0060summarize\u0060 and \u0060top\u0060 to limit the volume that you display.\r\n\u003E * Sort the data to define the order of the x-axis.\r\n\u003E * User agents are free to \u0022guess\u0022 the value of properties that are not specified\r\n  by the query. In particular, having \u0022uninteresting\u0022 columns in the schema of\r\n  the result might translate into them guessing wrong. Try projecting-away such\r\n  columns when that happens.",
    "Syntax": "*T* \u0060|\u0060 \u0060render\u0060 *visualization* [\u0060with\u0060 \u0060(\u0060 *propertyName* \u0060=\u0060 *propertyValue* [\u0060,\u0060 ...]\u0060)\u0060]"
  },
  {
    "Name": "join",
    "Description": "Merge the rows of two tables to form a new table by matching values of the specified columns from each table.\r\n\r\nKusto Query Language (KQL) offers many kinds of joins that each affect the schema and rows in the resultant table in different ways. For example, if you use an \u0060inner\u0060 join, the table has the same columns as the left table, plus the columns from the right table. For best performance, if one table is always smaller than the other, use it as the left side of the \u0060join\u0060 operator. The following image provides a visual representation of the operation performed by each join.\r\n\r\n:::image type=\u0022content\u0022 source=\u0022images/joinoperator/join-kinds.png\u0022 alt-text=\u0022Diagram showing query join kinds.\u0022:::",
    "Syntax": "*LeftTable* \u0060|\u0060 \u0060join\u0060 [ \u0060kind\u0060 \u0060=\u0060 *JoinFlavor* ] [ *Hints* ] \u0060(\u0060*RightTable*\u0060)\u0060 \u0060on\u0060 *Conditions*"
  },
  {
    "Name": "union",
    "Description": "Takes two or more tables and returns the rows of all of them.",
    "Syntax": "[ *T* \u0060|\u0060 ] \u0060union\u0060 [ *UnionParameters* ] [\u0060kind=\u0060 \u0060inner\u0060|\u0060outer\u0060] [\u0060withsource=\u0060 *ColumnName*] [\u0060isfuzzy=\u0060 \u0060true\u0060|\u0060false\u0060] *Tables*\r\n\r\n\u003E [!NOTE]\r\n\u003E The operation of the \u0060union\u0060 operator can be altered by setting the \u0060best_effort\u0060 request property to \u0060true\u0060, using either a [set statement](./setstatement.md) or through [client request properties](../api/netfx/request-properties.md). When this property is set to \u0060true\u0060, the \u0060union\u0060 operator will disregard fuzzy resolution and connectivity failures to execute any of the sub-expressions being \u201Cunioned\u201D and yield a warning in the query status results."
  },
  {
    "Name": "getschema",
    "Description": "Produce a table that represents a tabular schema of the input.",
    "Syntax": "*T* \u0060|\u0060 \u0060getschema\u0060"
  }

]

